in kotlin, lambdas are always inside {}, irrespective if it is a single line or multi-line
Ex - .forEach {}, forEach is a function that takes lambda as the parameter, you can leave out the () for the fn.
You can use a single line or a multi-line lambda
for (i in 0 until 10)
lower bound included, 0 included, upperbound not included, 10 not included
for (i in 0 .. 10)
both lower bound, 0 and upperbound 10 are included.

runApplication<SpringbootKotlinApplication>(*args)
*args - represents varags in kotlin

extension function in kotlin - added at compile time to an existing class

Springboot uses JUnit 5 under the hood for testing

adding a val or a var to the constructor parameter makes it class attribute. If val / var is left out on the contructor parameter then its treated as a constructor parameter.

Elvis operator  :?
--------------
if left side of the elvis operator is null then execute it, if not then execute the right side of it

Reified
-------
in Java generics types are erased at compile time, unless you explicitly specify the className, compiler cannot figure out the type
Ex - <T> T = TestRestTemplate.getForObject (String url, Class<T> responseType, Object... urlVariables)
If Class<T> is not specified with the name of the class, generics erases that information and response body cannot be automatically converted into the data class.

in kotlin reified type is used. reified means preserve the type information during the compilation process

TestRestTemplate is a client to the RestfulWebservice

Because we use back tack `` in test names it allows to use special characters - '' and "" inside test names

import org.springframework.boot.test.web.client.getForEntity
import org.springframework.boot.test.web.client.getForObject
Reason for importing these methods is because we are using Kotlin classes and not java methods
    val entity = template.getForEntity<Greeting>("/rest")
    val greeting = template.getForObject<Greeting>("/rest?name=Dolly")

Java way of using the same
    val greeting = template.getForObject("/rest?name=Dolly", Greeting::class.java)
These functions - getForObject and  getForEntity are created as extension functions in kotlin, so we should import them.

Advantage of using getForEntity over getForObject - getForEntity returns a wrapper and we can check for Headers.

when u run ./gradlew test OR ./gradlew build
test index.html is available in build/reports/tests/test/index.html

You can also call functions inside the print or someother function
fun getName (): String? = null

fun main() {
    println("hey ${getName()}! How are u today?")
}

Companion Object is a Singleton inside the class, creating an alternative to static methods and variables. Only one companion class allowed inside a class.
Refer to some good examples in kotlin-learning project

Adding any function inside its own file with the same name, can be accessed by just calling the method name -
    myPrintln.kt, and how it is accessed inside the SpringbootKotlinApplication.kt

const in a companion Object is similar to Blank final in Java, Blank final in Java will be initialized inside the constructor
const means it is known at compile time

final keyword is also available in kotlin

in kotlin == means calling the equals method on Any object

test reports in a intellij project can be found under - build/reports/tests/test/index.html

You can't auto wire into a bean that is not Spring managed Bean
@SpringBootTest makes a class a Spring Managed Bean
@SpringBootTest, means we are doing a true integration test, SpringBoot will deploy the application to a server on a random port

you should import the extension functions

exclamation mark for a library name coming from java does not tell Kotlin whether it is nullable or not
file:File!

ktor allows you to build a server - https://ktor.io/
micronaut is a good framework for building microservices

plugin.spring :: spring plugin in the build.gradle open Spring annotated classes for extension - @Component, @Service, @Transactional, etc.
Enables proxy classes to be generated
Also plugin.jpa :: Generates no-argument constructor for @Entity classes

co-routines provides the ability to write asynchronous code in a way that looks like synchronous code
Kotlin can suspend the thread, save the state, go do something else come back and resume where it left off
withContext(Dispatchers.IO) { :: means don't use the thread request is attached to but use a different thread

JPA do not play well with immutable Objects - val
Rather than data classes use regular classes
JPA expects things to be modifiable.
Recommendation is to put the null variables at the end